// <auto-generated />
using System;
using B_Riley.BankingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B_Riley.BankingApp.Data.Migrations
{
    [DbContext(typeof(BankingAppContext))]
    [Migration("20220729154354_AddIsDeletedToAccount")]
    partial class AddIsDeletedToAccount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("B_Riley.BankingApp.Models.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("B_Riley.BankingApp.Models.Entities.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("FromAccountBalance")
                        .HasColumnType("float");

                    b.Property<int>("FromAccountId")
                        .HasColumnType("int");

                    b.Property<double>("ToAccountBalance")
                        .HasColumnType("float");

                    b.Property<int>("ToAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountId")
                        .IsUnique();

                    b.HasIndex("ToAccountId")
                        .IsUnique();

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("B_Riley.BankingApp.Models.Entities.Transfer", b =>
                {
                    b.HasOne("B_Riley.BankingApp.Models.Entities.Account", "FromAccount")
                        .WithOne()
                        .HasForeignKey("B_Riley.BankingApp.Models.Entities.Transfer", "FromAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("B_Riley.BankingApp.Models.Entities.Account", "ToAccount")
                        .WithOne()
                        .HasForeignKey("B_Riley.BankingApp.Models.Entities.Transfer", "ToAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
